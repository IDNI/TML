# An Imhof style TML interpreter. More precisely, it takes a quoted
# program and a domain and produces the result of interpretation in some
# encoding. In the first interpreters a major bottleneck was caused by
# its dependence on FOL: the FOL TML to pure TML transformation produced
# correct but slow programs, and the BDD-based transformation was
# incomplete. This implementation does not use FOL.

# The interpreter must coordinate rule executions correctly to produce
# correct results. This can be achieved in two ways: creating predicates
# to indicate when certain substeps are done with some quantified
# formulas to check when all subcomputations of a particular step are
# done; or the timestep can be made explicit with subsequent database
# states being expressed in terms of previous steps. The latter approach
# is taken to avoid FOL and is currently faster than previous attempts
# using the former approach.

# During the execution of an interpreter implementing the latter
# approach, it may happen that latter steps may derive too many facts
# (possibly because a rule may have a negative term in its body that has
# not yet been derived because the previous step has only partially
# executed). To avoid thinking about deleting invalidated facts, it is
# convenient to write the interpreter in noninflationary Datalog~ (where
# the immediate consequence operator is destructive) and somehow
# simulate this datalog in Datalog~~ (TML). This simulation can be done
# using two stages: tick, which simultaneously clears all final
# relations and executes noninflationary Datalog~ rules into an
# intermediate relation; and tock, which simultaneously clears all
# intermediate relations and commits the intermediate results into the
# final relation.

tick() :- ~tick(), ~tock().

tock(), ~tick() :- tick().

tick(), ~tock() :- tock().

# List operations

domaine(?x) :- dom_fst(?a ?x).

list(?x) :- dom_fst(?x ?a).

list(?x) :- dom_nil(?x).

# Assert that ?out matches ?in, except possibly at index ?idx

unset(?in ?idx ?out) :-
	?idx > 0,
	?pred + 1 = ?idx,
	dom_fst(?in ?in_hd), dom_rst(?in ?in_tl),
	dom_fst(?out ?out_hd), dom_rst(?out ?out_tl),
	unset(?in_tl ?pred ?out_tl).

unset(?in 0 ?out) :-
	dom_fst(?in ?in_hd), dom_rst(?in ?in_tl),
	domaine(?out_hd),
	dom_fst(?out ?out_hd), dom_rst(?out ?in_tl).

# Assert that index ?idx of array ?in has value ?val

fix(?in ?idx ?val) :-
	dom_fst(?in ?in_hd), dom_rst(?in ?in_tl),
	fix(?in_tl ?pred ?val),
	?idx > 0,
	domaine(?idx),
	domaine(?val),
	?pred + 1 = ?idx.

fix(?in 0 ?val) :-
	domaine(?val),
	dom_fst(?in ?val), dom_rst(?in ?in_tl).

# Same as fix but for equisized arrays of indicies and values

gfix(?lst ?inds ?vals) :-
	dom_fst(?inds ?inds_hd), dom_rst(?inds ?inds_tl),
	dom_fst(?vals ?vals_hd), dom_rst(?vals ?vals_tl),
	fix(?lst ?inds_hd ?vals_hd),
	gfix(?lst ?inds_tl ?vals_tl).

gfix(?lst ?inds ?vals) :-
	list(?lst),
	dom_nil(?inds),
	dom_nil(?vals).

# Assert that ?out is the same as ?in with entries not corresponding to
# 1s in ?chks removed

select(?in ?chks ?out) :-
	dom_fst(?in ?in_hd), dom_rst(?in ?in_tl),
	dom_fst(?chks 1), dom_rst(?chks ?chks_tl),
	dom_fst(?out ?in_hd), dom_rst(?out ?out_tl),
	select(?in_tl ?chks_tl ?out_tl).

select(?in ?chks ?out) :-
	dom_fst(?in ?in_hd), dom_rst(?in ?in_tl),
	dom_fst(?chks 0), dom_rst(?chks ?chks_tl),
	select(?in_tl ?chks_tl ?out).

select(?in ?chks ?out) :-
	dom_nil(?in),
	dom_nil(?chks),
	dom_nil(?out).

# Assert that ?out is the same as ?in with entries not corresponding to
# 0s in ?chks removed

deselect(?in ?chks ?out) :-
	dom_fst(?in ?in_hd), dom_rst(?in ?in_tl),
	dom_fst(?chks 0), dom_rst(?chks ?chks_tl),
	dom_fst(?out ?in_hd), dom_rst(?out ?out_tl),
	deselect(?in_tl ?chks_tl ?out_tl).

deselect(?in ?chks ?out) :-
	dom_fst(?in ?in_hd), dom_rst(?in ?in_tl),
	dom_fst(?chks 1), dom_rst(?chks ?chks_tl),
	deselect(?in_tl ?chks_tl ?out).

deselect(?in ?chks ?out) :-
	dom_nil(?in),
	dom_nil(?chks),
	dom_nil(?out).

# Interpreter Tick

~scratch(?ts ?id ?out), ~databases(?nts ?name ?out), ~fixpoint(?ts ?nts) :-
	tick().

scratch0(?ts ?id ?out) :-
	in_time(?ts),
	quote_type(?id 0), # TRUE
	dom_max(?out),
	tick().

scratch0(?ts ?id ?out) :-
	in_time(?ts),
	quote_type(?id 6), # NOT
	quote_not_body(?id ?qb),
	~scratch(?ts ?qb ?out),
	dom_max(?out),
	tick().

scratch0(?ts ?id ?out) :-
	quote_type(?id 7), # AND
	quote_and_left(?id ?ql),
	quote_and_right(?id ?qr),
	scratch(?ts ?ql ?out),
	scratch(?ts ?qr ?out),
	tick().

scratch0(?ts ?id ?out) :-
	quote_type(?id 8), # OR
	quote_or_left(?id ?ql),
	quote_or_right(?id ?qr),
	scratch(?ts ?ql ?out),
	tick().

scratch0(?ts ?id ?out) :-
	quote_type(?id 8), # OR
	quote_or_left(?id ?ql),
	quote_or_right(?id ?qr),
	scratch(?ts ?qr ?out),
	tick().

scratch0(?ts ?id ?out) :-
	quote_type(?id 2), # TERM
	quote_term_relation(?id ?name),
	quote_term_params(?id ?vars),
	quote_term_param_types(?id ?chks),
	databases(?ts ?name ?vals),
	dom_max(?out),
	select(?vars ?chks ?vars_s),
	select(?vals ?chks ?vals_s),
	gfix(?out ?vars_s ?vals_s),
	deselect(?vars ?chks ?syms),
	deselect(?vals ?chks ?syms),
	tick().

to_add(?ts ?name ?out) :-
	quote_type(?id 1), # RULE
	quote_rule_head(?id ?qh),
	quote_rule_body(?id ?qb),
	quote_type(?qh 2 /*TERM*/),
	quote_term_relation(?qh ?name),
	quote_term_params(?qh ?vars),
	quote_term_param_types(?qh ?chks),
	scratch(?ts ?qb ?vals),
	select(?vars ?chks ?vars_s),
	select(?out ?chks ?out_s),
	gfix(?vals ?vars_s ?out_s),
	deselect(?vars ?chks ?syms),
	deselect(?out ?chks ?syms),
	tick().

to_del(?ts ?name ?out) :-
	quote_type(?id 1), # RULE
	quote_rule_head(?id ?qnh),
	quote_rule_body(?id ?qb),
	quote_type(?qnh 6 /*NOT*/),
	quote_not_body(?qnh ?qh),
	quote_type(?qh 2 /*TERM*/),
	quote_term_relation(?qh ?name),
	quote_term_params(?qh ?vars),
	quote_term_param_types(?qh ?chks),
	scratch(?ts ?qb ?vals),
	select(?vars ?chks ?vars_s),
	select(?out ?chks ?out_s),
	gfix(?vals ?vars_s ?out_s),
	deselect(?vars ?chks ?syms),
	deselect(?out ?chks ?syms),
	tick().

to_carry(?nts ?name ?out) :-
	databases(?nts ?name ?out),
	tick().

# A given time-step pair cannot be a fixed point if between their
# corresponding databases, there is an entry that is in one but not the
# other.

not_fixpoint(?ts ?nts) :-
	?ts < ?nts,
	in_time(?ts),
	in_time(?nts),
	databases(?ts ?name ?out),
	~databases(?nts ?name ?out),
	tick().

not_fixpoint(?ts ?nts) :-
	?ts < ?nts,
	in_time(?ts),
	in_time(?nts),
	~databases(?ts ?name ?out),
	databases(?nts ?name ?out),
	tick().

# Interpreter Tock

~scratch0(?ts ?id ?out), ~to_add(?ts ?name ?out), ~to_del(?ts ?name ?out), ~to_carry(?nts ?name ?out), ~not_fixpoint(?ts ?nts) :-
	tock().

# Prevents more than the given number of database steps from being
# derived. The addition of 0 to ?ts forces ?ts to be a number.

in_time(?ts) :- 0 <= ?ts, ?ts < 43210, ?ts + 0 = ?ts.

# Add all the facts into the zeroth database

databases(0 ?name ?out) :-
	quote_type(?id 0), # FACT
	quote_fact_term(?id ?qt),
	quote_type(?qt 2 /*TERM*/),
	quote_term_relation(?qt ?name),
	quote_term_params(?qt ?vars),
	quote_term_param_types(?qt ?chks),
	list(?out),
	deselect(?vars ?chks ?syms),
	deselect(?out ?chks ?syms),
	tock().

# Add all the derived insertions into the next database

databases(?nts ?name ?out) :-
	?ts + 1 = ?nts,
	in_time(?ts),
	to_add(?ts ?name ?out),
	tock().

# Carry over all the undeleted facts from the previous database into the
# next. The qualifier "undeleted" is important, otherwise deleting
# existing facts would always cause a contradicition.

databases(?nts ?name ?out) :-
	?ts + 1 = ?nts,
	in_time(?ts),
	~to_del(?ts ?name ?out),
	to_carry(?ts ?name ?out),
	tock().

# Delete all the derived deletions from the next database

~databases(?nts ?name ?out) :-
	?ts + 1 = ?nts,
	in_time(?ts),
	to_del(?ts ?name ?out),
	tock().

scratch(?ts ?id ?out) :-
	scratch0(?ts ?id ?out),
	tock().

# A timestep is a fixpoint if it is not not a fixpoint.

fixpoint(?ts ?nts) :-
	?ts < ?nts,
	in_time(?ts),
	in_time(?nts),
	~not_fixpoint(?ts ?nts),
	tock().
