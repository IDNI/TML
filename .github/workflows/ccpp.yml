name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  debug-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        compiler: [clang, gcc]
        os: [ubuntu-22.04, macOS-12]

    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master
# Ubuntu installations
      - name: Installing cmake on Ubuntu
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install -y cmake
      - name: Installing gcovr on Ubuntu
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install -y gcovr
      - name: Installing boost on Ubuntu
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install -y libboost1.74 libboost1.74-dev
      - name: Installing clang and clang tidy on Ubuntu
        if: matrix.compiler == 'clang' && matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install -y clang clang-tidy
# macOS installations
      - name: Installing boost on macOS
        if: matrix.os == 'macOS-12'
        run: |
          brew install boost
      - name: Installing lcov on macOS (clang)
        if: matrix.compiler == 'clang' && matrix.os == 'macOS-12'
        run: |
          brew install lcov
      - name: Installing gcovr on macOS (gcc)
        if: matrix.compiler == 'gcc' && matrix.os == 'macOS-12'
        run: |
          brew install gcovr
      - name: Installing cppcheck on macOS
        if: matrix.os == 'macOS-12'
        run: |
          brew install cppcheck
# building
      - name: Bulding debug version
        run: |
          mkdir -p build-Debug
          cd build-Debug
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            CMAKE_CXX_COMPILER=g++-11
            cmake .. -G "Unix Makefiles" -DCMAKE_BUILD_TYPE="Debug" -DBUILD_CPPCHECK=TRUE -DBUILD_CLANG_TIDY=TRUE -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER -DBUILD_CODE_COVERAGE=TRUE
          else
            if [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
              CMAKE_CXX_COMPILER=clang++-12
            else
              CMAKE_CXX_COMPILER=$(brew --prefix llvm)/bin/clang++
            fi
            cmake .. -G "Unix Makefiles" -DCMAKE_BUILD_TYPE="Debug" -DBUILD_CPPCHECK=TRUE -DBUILD_CLANG_TIDY=TRUE -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER
          fi
          make -j5
# tests
      - name: Test TML execution
        run: ./build-Debug/tml -ie "a(1)."
      - name: Running unit tests
        run: |
          cd ./build-Debug
          ../tests/run_unit_tests.sh
          cd -
      - name: Running regression tests
        run: |
          cd ./tests
          ./run_all_regression_tests.sh
          cd -
#      - name: Running NodeJS regression tests # TODO: build tmllib.js first
#        run: |
#          cd ./tests
#          ./run_all_nodejs_regression_tests.sh
#          cd -
# Ubuntu analyzes
#      - name: Formatting
#        if: matrix.compiler == 'clang' && matrix.os == 'ubuntu-22.04'
#        run: |
#          cd build-Debug
#          make -j5 clang-format
      - name: Running clang tidy on Ubuntu
        if: matrix.compiler == 'clang' && matrix.os == 'ubuntu-22.04'
        run: |
          cd build-Debug
          make -j5 clang-tidy
      - name: Generating coverage report on Ubuntu
        if: success() && matrix.compiler == 'gcc' && matrix.os == 'ubuntu-22.04'
        run: |
          sudo git clone https://github.com/linux-test-project/lcov
          cd lcov
          sudo make install
          cd ../
          echo `ls`
          /usr/local/bin/lcov -c -d ./build-Debug/src/CMakeFiles --gcov-tool /usr/bin/gcov -o coverage.info
          /usr/local/bin/lcov --remove coverage.info '/usr/*' --output-file coverage.info
          /usr/local/bin/lcov --list coverage.info # debug info
          bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
# macOS analyzes
      - name: Running CPP check on macOS
        if: matrix.compiler == 'clang' && matrix.os == 'macOS-12'
        run: |
          cd build-Debug
          make -j5 cppcheck
